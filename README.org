* Parts

| Name                |   Qty | Price, $ |
|---------------------+-------+----------|
| Diodes 1n4148       |   100 |     0.78 |
| Keys Gateron Brown  |    50 |    21.00 |
| Keys Gateron Red    |    10 |          |
| Keys Gateron Other  |     5 |          |
| Keycaps PBT DSA     |    65 |    17.90 |
| Atmega32u4          |     1 |     2.88 |
| Atmega32u4          |     1 |     3.22 |
| Wires               | 1 set |      2.2 |
| 3.5mm plug          |     2 |      0.9 |
| 3.5mm cable         |     1 |     1.58 |
| encoder             |     5 |     1.78 |
| knob                |    10 |     1.40 |
| petg filament 1kg   |     1 |       30 |
| petg leftover       |       |     -24. |
| soldering paste     |     1 |     2.29 |
| soldering wire 100g |     1 |       11 |
| soldering wire left |       |      -10 |
|---------------------+-------+----------|
| tent screws         |     8 |          |
| plastidip           |     1 |          |
| tent fixing nuts    |     4 |          |
| tent nuts M5        |     4 |          |
|---------------------+-------+----------|
|                     |       |    62.93 |
#+TBLFM: @>$3=vsum(@I..@II)::$3=::@15$3=@14$3 * -0.8

* Layout
[[./layout_v1.jpg]]

- To find best layout for my hands I've put several stripes of masking tape glue side up on a sheet of paper.
- Then I've adjusted columns to my liking and measured the offsets.
- I have Gateron switches which are Cherry-MX compatible. So the hole size is 14x14 mm and distance between holes should be 5 mm.
- Thumb cluster is parameterized in polar coordinates.

* Case design
** v1
[[./cardboard_v1.jpg]]
** v2
[[./cardboard_v2.jpg]]

** manufacturing
I'm going to choose one of the options.
1. PCB only
   jlcpcb, x5 ~ 27$ + 11$ shipping
2. *3d printed*
3. laser cutted
   price estimation:
   - $5.14 x 2 + $9 (fixed, handling) = $19.28 (ponoko)
   - €8.20 x 2 + shipping (formulor.de), no 1.5mm material

3d printing it is. Next time I'll try PCBs. It seems that you can use PCB as top plate and the manufacturer could mill holes of any shape.
* 3d printing
https://thomasbaart.nl/2019/04/07/cheat-sheet-custom-keyboard-mounting-styles/

- [[https://all3dp.com/1/3d-printing-support-structures/][need of support structures for overhang]]
- tolerances for an easy assembly
- choosing proper thickness to ensure integrity

Requirements.
1. switch should be firmly attached to the keyboard
   switch is designed to be mounted on a panel 1.5 mm thick and soldered onto PCB
   you can select one of those options - pcb+panel, panel only, pcb only

   produces: mounting place

2. switch should be positioned under the finger and easily accessible without much finger movement
   there are few ergonomic layouts that minimize finger movement. Just take one and adapt it to your hands

   2.1 keycaps are wider than the switch body. there should be minimal distance between keycaps so that they don't touch
   ortholinear + thumb cluster shaped as an arc

   produces: layout

3. mounting plate should be sturdy enough to not bend when typing

   produces: plate thickness

4. switches should be wired to the controller
   pcb or handwiring. Both need some vertical space
   something that elevates the plate needs to be implemented:
   - pins
   - another plate

   produces: wiring space

5. controller should have some place

   produces: controller location

6. underside of the keyboard should be protected
   pcb or handwiring should be protected from water spills and mechanical damage

   produces: bottom plate

7. optional: halves of a split keyboard should communicate

   produces: cable between halves, connectors

9. optional: tilt/tent

   produces: tent brackets

from handbook of 3d printing
make wall thickness proportional to nozzle width
add fillets everywhere
<45 degree overhang doesn't require support

** first print
For first print I've prepare a single row of 5 keys where each hole has size $14+i*0.1, i in [-2..2]$. I've found 14-0.2 the best. Then I've prepared small test case where I've mounted all the different types of switches I have. I had to redesign promicro mount after the print as the board wasn't fitting nicely.

[[./test-print.jpg]]

* Hand-wiring
[[https://deskthority.net/viewtopic.php?f=7&t=6050&start=][BrownFox step by step - deskthority]]

The keyboard has 22 keys per hand - 3 rows of 6 columns and 4 thumb keys. It fits in a 4x6 matrix and requires =4+6=10= pins. Encoder takes 2 pins and serial connection takes another 1. In total: 10 pins for keys + 2 for encoder + 1 for serial + GND + VCC = 15 pins.

Some pins has extra functions and they have to be used last.

* Firmware
Consult [[https://beta.docs.qmk.fm/developing-qmk/c-development/hardware_keyboard_guidelines][documentation]].

Create new template with =./util/new_keyboard.sh=

#+BEGIN_SRC sh :dir sarg :results output :exports both
tree --noreport
#+END_SRC

#+RESULTS:
#+begin_example
.
├── config.h
├── info.json
├── keymaps
│   └── default
│       ├── config.h
│       ├── keymap.c
│       └── readme.md
├── readme.md
├── rules.mk
├── sarg.c
└── sarg.h
#+end_example

Let's go file by file to find minimal set of tweaks:

** =config.h=
#+BEGIN_SRC c
#define MATRIX_ROWS 8
#define MATRIX_COLS 6
/*
quantum/split_common/matrix.c presumes that kbd is split evenly by rows

#define ROWS_PER_HAND (MATRIX_ROWS / 2)
*/

// pinout http://i.imgur.com/wMNx2u6.png
#define MATRIX_ROW_PINS { D0, D5 }
#define MATRIX_COL_PINS { F1, F0, B0 }

#define DIODE_DIRECTION COL2ROW

#define SOFT_SERIAL_PIN D0  // or D1, D2, D3, E6
#+END_SRC

** =info.json=
Can be skipped, used in QMK web configurator.
** =rules.mk=
#+BEGIN_EXAMPLE
BOOTLOADER = caterina
SPLIT_KEYBOARD = yes
#+END_EXAMPLE
** =sarg.c=
Could be left as is.
** =sarg.h=
Here you define a macro that returns array of arrays with your layout.
#+INCLUDE: "./firmware/sarg.h" :lines "21-45" src c
** =keymaps/default/keymap.c=
Define layout in =keymaps= array.

* First compilation.
#+BEGIN_SRC sh
bin/qmk compile -kb sarg -km default
#+END_SRC

#+BEGIN_EXAMPLE
...
Checking file size of sarg_default.hex                                                              [OK]
 * The firmware size is fine - 23964/28672 (83%, 4708 bytes free)
#+END_EXAMPLE

* TODO link

Nicinabox has a [very nice and detailed guide](https://github.com/nicinabox/lets-split-guide) for the Let's Split keyboard, that covers most everything you need to know, including troubleshooting information.
