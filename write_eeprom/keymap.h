#include <quantum_keycodes.h>
#include <modifiers.h>
#include <stdint.h>

typedef struct KEY {
  uint8_t layer;
  uint8_t row;
  uint8_t col;
  uint16_t keycode;
} KEY;

const KEY keys[] = {
  { 0, 0, 0, KC_ESC },
  { 0, 0, 1, KC_Q },
  { 0, 0, 2, KC_W },
  { 0, 0, 3, KC_E },
  { 0, 0, 4, KC_R },
  { 0, 0, 5, KC_T },
  { 0, 1, 0, KC_TAB },
  { 0, 1, 1, KC_A },
  { 0, 1, 2, LALT_T(KC_S) },
  { 0, 1, 3, LCTL_T(KC_D) },
  { 0, 1, 4, LSFT_T(KC_F) },
  { 0, 1, 5, KC_G },
  { 0, 2, 0, KC_MINS },
  { 0, 2, 1, KC_Z },
  { 0, 2, 2, KC_X },
  { 0, 2, 3, KC_C },
  { 0, 2, 4, KC_V },
  { 0, 2, 5, KC_B },
  { 0, 3, 1, KC_ENT },
  { 0, 3, 2, KC_LGUI },
  { 0, 3, 3, KC_LALT },
  { 0, 3, 4, MO(1) },
  { 0, 3, 5, LGUI_T(KC_ENT) },
  { 0, 4, 0, KC_BSPC },
  { 0, 4, 1, KC_P },
  { 0, 4, 2, KC_O },
  { 0, 4, 3, KC_I },
  { 0, 4, 4, KC_U },
  { 0, 4, 5, KC_Y },
  { 0, 5, 0, KC_QUOT },
  { 0, 5, 1, KC_SCLN },
  { 0, 5, 2, RALT_T(KC_L) },
  { 0, 5, 3, RCTL_T(KC_K) },
  { 0, 5, 4, RSFT_T(KC_J) },
  { 0, 5, 5, KC_H },
  { 0, 6, 0, KC_BSLS },
  { 0, 6, 1, KC_SLSH },
  { 0, 6, 2, KC_DOT },
  { 0, 6, 3, KC_COMM },
  { 0, 6, 4, KC_M },
  { 0, 6, 5, KC_N },
  { 0, 7, 1, KC_ENT },
  { 0, 7, 2, KC_RGUI },
  { 0, 7, 3, KC_RALT },
  { 0, 7, 4, MO(2) },
  { 0, 7, 5, RALT_T(KC_SPC) },
  { 1, 0, 0, KC_GRV },
  { 1, 0, 1, KC_1 },
  { 1, 0, 2, KC_2 },
  { 1, 0, 3, KC_3 },
  { 1, 0, 4, KC_4 },
  { 1, 0, 5, KC_5 },
  { 1, 1, 0, KC_NO },
  { 1, 1, 1, KC_NO },
  { 1, 1, 2, KC_NO },
  { 1, 1, 3, KC_PGUP },
  { 1, 1, 4, KC_PGDN },
  { 1, 1, 5, KC_NO },
  { 1, 2, 0, KC_F1 },
  { 1, 2, 1, KC_F2 },
  { 1, 2, 2, KC_F3 },
  { 1, 2, 3, KC_F4 },
  { 1, 2, 4, KC_F5 },
  { 1, 2, 5, KC_F6 },
  { 1, 3, 1, QK_BOOT },
  { 1, 3, 2, KC_NO },
  { 1, 3, 3, TO(3) },
  { 1, 3, 4, KC_NO },
  { 1, 3, 5, KC_NO },
  { 1, 4, 0, KC_MINS },
  { 1, 4, 1, KC_0 },
  { 1, 4, 2, KC_9 },
  { 1, 4, 3, KC_8 },
  { 1, 4, 4, KC_7 },
  { 1, 4, 5, KC_6 },
  { 1, 5, 0, KC_NO },
  { 1, 5, 1, KC_NO },
  { 1, 5, 2, KC_RGHT },
  { 1, 5, 3, KC_UP },
  { 1, 5, 4, KC_DOWN },
  { 1, 5, 5, KC_LEFT },
  { 1, 6, 0, KC_F12 },
  { 1, 6, 1, KC_F11 },
  { 1, 6, 2, KC_F10 },
  { 1, 6, 3, KC_F9 },
  { 1, 6, 4, KC_F8 },
  { 1, 6, 5, KC_F7 },
  { 1, 7, 1, KC_MPLY },
  { 1, 7, 2, KC_NO },
  { 1, 7, 3, KC_NO },
  { 1, 7, 4, KC_NO },
  { 1, 7, 5, KC_RSFT },
  { 2, 0, 0, KC_TILD },
  { 2, 0, 1, KC_EXLM },
  { 2, 0, 2, KC_AT },
  { 2, 0, 3, KC_HASH },
  { 2, 0, 4, KC_DLR },
  { 2, 0, 5, KC_PERC },
  { 2, 1, 0, KC_NO },
  { 2, 1, 1, KC_NO },
  { 2, 1, 2, KC_NO },
  { 2, 1, 3, KC_NO },
  { 2, 1, 4, KC_NO },
  { 2, 1, 5, KC_NO },
  { 2, 2, 0, KC_NO },
  { 2, 2, 1, KC_NO },
  { 2, 2, 2, KC_NO },
  { 2, 2, 3, KC_NO },
  { 2, 2, 4, KC_NO },
  { 2, 2, 5, KC_NO },
  { 2, 3, 1, KC_NO },
  { 2, 3, 2, KC_NO },
  { 2, 3, 3, KC_NO },
  { 2, 3, 4, KC_NO },
  { 2, 3, 5, KC_LSFT },
  { 2, 4, 0, KC_NO },
  { 2, 4, 1, KC_ASTR },
  { 2, 4, 2, KC_RPRN },
  { 2, 4, 3, KC_LPRN },
  { 2, 4, 4, KC_AMPR },
  { 2, 4, 5, KC_CIRC },
  { 2, 5, 0, KC_NO },
  { 2, 5, 1, KC_NO },
  { 2, 5, 2, KC_RBRC },
  { 2, 5, 3, KC_LBRC },
  { 2, 5, 4, KC_EQL },
  { 2, 5, 5, KC_MINS },
  { 2, 6, 0, KC_NO },
  { 2, 6, 1, KC_NO },
  { 2, 6, 2, KC_RCBR },
  { 2, 6, 3, KC_LCBR },
  { 2, 6, 4, KC_PLUS },
  { 2, 6, 5, KC_UNDS },
  { 2, 7, 1, KC_NO },
  { 2, 7, 2, KC_NO },
  { 2, 7, 3, KC_NO },
  { 2, 7, 4, KC_NO },
  { 2, 7, 5, KC_NO },
  { 3, 0, 0, KC_ESC },
  { 3, 0, 1, KC_7 },
  { 3, 0, 2, KC_8 },
  { 3, 0, 3, KC_1 },
  { 3, 0, 4, KC_2 },
  { 3, 0, 5, KC_3 },
  { 3, 1, 0, KC_GRV },
  { 3, 1, 1, KC_9 },
  { 3, 1, 2, KC_LEFT },
  { 3, 1, 3, KC_UP },
  { 3, 1, 4, KC_RGHT },
  { 3, 1, 5, KC_4 },
  { 3, 2, 0, TO(0) },
  { 3, 2, 1, KC_0 },
  { 3, 2, 2, KC_Q },
  { 3, 2, 3, KC_DOWN },
  { 3, 2, 4, KC_6 },
  { 3, 2, 5, KC_5 },
  { 3, 3, 1, KC_NO },
  { 3, 3, 2, KC_ENT },
  { 3, 3, 3, KC_TRNS },
  { 3, 3, 4, KC_C },
  { 3, 3, 5, KC_SPC },
  { 3, 4, 0, KC_NO },
  { 3, 4, 1, KC_NO },
  { 3, 4, 2, KC_NO },
  { 3, 4, 3, KC_NO },
  { 3, 4, 4, KC_NO },
  { 3, 4, 5, KC_NO },
  { 3, 5, 0, KC_NO },
  { 3, 5, 1, KC_NO },
  { 3, 5, 2, KC_NO },
  { 3, 5, 3, KC_NO },
  { 3, 5, 4, KC_NO },
  { 3, 5, 5, KC_NO },
  { 3, 6, 0, KC_NO },
  { 3, 6, 1, KC_NO },
  { 3, 6, 2, KC_NO },
  { 3, 6, 3, KC_NO },
  { 3, 6, 4, KC_NO },
  { 3, 6, 5, KC_NO },
  { 3, 7, 1, KC_NO },
  { 3, 7, 2, KC_NO },
  { 3, 7, 3, KC_NO },
  { 3, 7, 4, KC_NO },
  { 3, 7, 5, KC_NO }
};

typedef struct ENCODER {
  uint8_t layer;
  uint8_t idx;
  bool clockwise;
  uint16_t keycode;
} ENCODER;

const ENCODER encoders[] = {
  { 0, 0, false, KC_PGUP },
  { 0, 0, true, KC_PGDN },
  { 0, 1, false, KC_UP },
  { 0, 1, true, KC_DOWN },
  { 1, 0, false, KC_VOLD },
  { 1, 0, true, KC_VOLU },
  { 1, 1, false, KC_VOLD },
  { 1, 1, true, KC_VOLU },
  { 2, 0, false, KC_MEDIA_NEXT_TRACK },
  { 2, 0, true, KC_MEDIA_PREV_TRACK },
  { 2, 1, false, KC_UP },
  { 2, 1, true, KC_DOWN },
  { 3, 0, false, KC_NO },
  { 3, 0, true, KC_NO },
  { 3, 1, false, KC_NO },
  { 3, 1, true, KC_NO }
};
